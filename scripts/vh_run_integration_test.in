#!@PYTHON_PATH@
from __future__ import print_function
import sys

app_info = """
    
    Verlihub Python Integration Test v.1.0.0 - Test setup program
    Copyright (C) 2016-2019 Verlihub Team, info at verlihub dot net
    Created by Frog (frogged), the_frog at wp dot pl
    License: GNU General Public License v.3, see http://www.gnu.org/licenses/
    
    This program creates a hub in the vh_test subdirectory with the specified
    port and runs it, loading special Python scripts to test hub operations.
    After a few dozen seconds the test should be over and return 0 on success.
    First, you must create <db_name> database and grant access to <db_user>.
    But be warned: existing tables in <db_name> will be dropped.
    
    Usage: %(app_name)s <db_name> <db_user> <db_pass>
    
"""

if __name__ != "__main__":
    print("ERROR: This program should be run in standalone mode")
    sys.exit(1)

if len(sys.argv) != 4 or len(sys.argv) == 2 and sys.argv[1] in ["-h", "--help"]:
    print(app_info % dict(app_name=sys.argv[0]))
    sys.exit(1)

import re
import os
import os.path
import shutil
import time
import random
import socket
from subprocess import Popen
from datetime import datetime, timedelta
from MySQLdb import connect as mysql_db_connect, ProgrammingError

def die(s):
    print("ERROR: %s" % s)
    sys.exit(1)

bash_path = "@BASH_PATH@"
install_prefix = "@prefix@"
bin_dir = "@bindir@"
data_dir = "@datadir@"
lib_dir = "@libdir@"
plugin_dir = "@plugindir@"

hub_port = 0
hub_host = "127.0.0.1"
db_host = "127.0.0.1"
db_data = sys.argv[1]
db_user = sys.argv[2]
db_pass = sys.argv[3]
last_dir = os.getcwd()
test_dir = os.path.join(last_dir, "vh_test")
test_script_dir = os.path.join(test_dir, "scripts")
test_plugin_dir = os.path.join(test_dir, "plugins")

verlihub_bin = os.path.join(bin_dir, "verlihub")
plugman = plugin_dir + "/libplug_pi.so"
plugman_link = test_plugin_dir + "/libplug_pi.so"
python_plugin = plugin_dir + "/libpython_pi.so"
script_collection_dir = data_dir + "/test_scripts"

environment = dict(VERLIHUB_CFG=".", LD_LIBRARY_PATH=lib_dir)

db = None
c = None

def db_connect(db_data, db_user, db_pass, db_host="127.0.0.1"):
    try:
        database = mysql_db_connect(db=db_data, user=db_user, passwd=db_pass, host=db_host)
        cursor = database.cursor()
    except:
        die("unable to connect to the %s database" % db_data)
    return database, cursor

def set_var(var, val):
    c.execute("UPDATE SetupList SET val = %s WHERE var = %s", [val, str(var)])
    db.commit()

def get_var(var, val=None):
    c.execute("SELECT val FROM SetupList WHERE var = %s", [var])
    res = fetch_one()
    return res[0] if res else val

def register_user(nick, uclass, password):
    c.execute("INSERT INTO reglist(nick, class, login_pwd, pwd_change, pwd_crypt) VALUES " +
        "(%s, %s, %s, %s, %s)", [nick, uclass, password, 0, 0])
    db.commit()



if not os.access(plugman, os.F_OK):
    die("Cannot run test with plugman missing: %s" % plugman)
if not os.access(python_plugin, os.F_OK):
    die("Cannot run test with Python plugin missing: %s" % python_plugin)

print("Creating vh_test dir and copying data...")

try:
    os.mkdir(test_dir)
    os.mkdir(test_script_dir)
    os.mkdir(test_plugin_dir)
    os.symlink(plugman, plugman_link)
except OSError:
    pass  # The dir may already exist if we ran the test before

os.chdir(test_dir)

for path in os.listdir(script_collection_dir):
    shutil.copy(os.path.join(script_collection_dir, path), test_script_dir)

s = "db_host = %s\ndb_data = %s\ndb_user = %s\ndb_pass = %s\n" % (db_host, db_data, db_user, db_pass)
with open("dbconfig", "w") as f:
    f.write(s)

with open("faq", "w") as f:
    f.write("FAQ")

with open("motd", "w") as f:
    f.write("WELCOME")

# os.environ

print("Connecting to the database...")
db, c = db_connect(db_data, db_user, db_pass, db_host)

print("Dropping existing tables...")
all_db_tables = "SetupList, banlist, client_list, conn_types, custom_redirects, file_trigger, " \
    "kicklist, pi_plug, reglist, temp_rights, unbanlist"
c.execute("DROP TABLE IF EXISTS %s" % all_db_tables)
db.commit()

print("Closing database connection...")
c.close()
db.close()

print("Running hub for 20 seconds to recreate tables...\n")
proc = Popen([verlihub_bin], env=environment)
time.sleep(20)

print("\nKilling the hub...")
proc.kill()

print("Reconnecting to the database...")
db, c = db_connect(db_data, db_user, db_pass, db_host)

print("Checking if tables were recreated...")
try:
    c.execute("DESC SetupList")
    c.execute("DESC reglist")
except ProgrammingError, e:
    die(e)

print("Finding an unused port for the hub to listen on...")
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
port_is_ready = False

for i in xrange(50):
    hub_port = random.randint(8901, 19000)
    print("Checking port", hub_port)
    try:
        sock.bind((hub_host, hub_port))
        port_is_ready = True
        print("Yes, port %s is fine" % hub_port)
        break
    except:
        continue

sock.close()
if not port_is_ready:
    die("No available port found. Aborting.")

print("Updating tables...")
set_var("hub_name", "_vh_integration_test_")  # this is how we recognize the test hub
set_var("hub_host", "%s:%s" % (hub_host, hub_port))
set_var("listen_port", hub_port)
set_var("hub_security", "Verlihub")
set_var("opchat_name", "OpChat")
set_var("hublist_host", "")
set_var("send_crash_report", "0")

# Insane numbers, so that bot clients can operate without delay
set_var("int_chat_ms", "1")
set_var("int_flood_all_chat_limit", "1000")
set_var("int_flood_all_chat_period", "1")
set_var("int_flood_chat_limit", "1000")
set_var("int_flood_chat_period", "1")
set_var("int_flood_nicklist_limit", "1000")
set_var("int_flood_nicklist_period", "1")
set_var("int_flood_ping_limit", "1000")
set_var("int_flood_ping_period", "1")

register_user("Master", 10, "xxx")
register_user("Operator", 3, "xxx")
register_user("Reg", 1, "xxx")

c.execute("SELECT nick FROM pi_plug WHERE nick = 'python'")
res = c.fetchall()
if not res:
    die("Python plugin was not found in the database, so the test cannot continue.")

c.execute("UPDATE pi_plug SET autoload = 1 WHERE nick = 'python'")
db.commit()

print("Configuration finished.")
c.close()
db.close()

print("Running the hub for 1 minute at most to run tests...\n")
now = time.time()
proc = Popen([verlihub_bin], env=environment)
while time.time() < now + 60:
    time.sleep(5)
    proc.poll()
    if proc.returncode == None:
        continue
    elif proc.returncode == 0:
        print("\nSUCCESS: Test has finished correctly.\n")
        sys.exit(0)
    else:
        print("\nERROR: Test has finished with an error code: %s\n" % proc.returncode)
        sys.exit(3)

print("ERROR: The hub didn't stop running on its own. Killing it now...")
proc.kill()
sys.exit(2)
